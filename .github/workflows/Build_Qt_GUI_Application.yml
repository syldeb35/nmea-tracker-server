name: Build Qt GUI Application

on:
  # push:
  #   branches: [ main, develop, qt-gui ]
  # pull_request:
  #   branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    # === LINUX SETUP ===
    - name: Install Qt dependencies (Linux)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          qt6-base-dev \
          qt6-tools-dev \
          libgl1-mesa-dev \
          libegl1-mesa-dev \
          libxcb-xinerama0 \
          libxcb-cursor0 \
          libbluetooth-dev \
          bluez \
          bluez-tools
        
    # === MACOS SETUP ===
    - name: Install Qt dependencies (macOS)
      if: runner.os == 'macOS'
      run: |
        brew install qt6
        
    # === PYTHON DEPENDENCIES ===
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pyinstaller PyQt6 pyserial flask flask-socketio flask-cors gevent python-dotenv Pillow
        
    # === CREATE MISSING FILES (Unix) ===
    - name: Create missing files (Unix)
      if: runner.os != 'Windows'
      run: |
        # Créer requirements_gui.txt
        cat > requirements_gui.txt << 'EOF'
        PyQt6>=6.0.0
        pyserial>=3.5
        EOF
        
        # Créer start_gui.sh
        cat > start_gui.sh << 'EOF'
        #!/bin/bash
        echo "🚀 Starting NMEA Server GUI..."
        if [ -f "gui_config.py" ]; then
            echo "Starting Qt GUI..."
            python gui_config.py
        else
            echo "❌ gui_config.py not found"
            echo "Starting web interface instead..."
            python nmea_server.py
        fi
        EOF
        chmod +x start_gui.sh
        
        # Créer .env
        cat > .env << 'EOF'
        ENABLE_SERIAL=true
        ENABLE_UDP=true
        ENABLE_TCP=true
        DEBUG=false
        UDP_IP=0.0.0.0
        UDP_PORT=5005
        TCP_IP=0.0.0.0
        TCP_PORT=5006
        SERIAL_PORT=/dev/ttyUSB0
        SERIAL_BAUDRATE=4800
        EOF

    # === CREATE MISSING FILES (Windows) ===
    - name: Create missing files (Windows)
      if: runner.os == 'Windows'
      shell: pwsh
      run: |
        # Créer requirements_gui.txt
        @"
        PyQt6>=6.0.0
        pyserial>=3.5
        "@ | Out-File -FilePath "requirements_gui.txt" -Encoding utf8
        
        # Créer start_gui.bat
        @"
        @echo off
        echo 🚀 Starting NMEA Server GUI...
        if exist gui_config.py (
            echo Starting Qt GUI...
            python gui_config.py
        ) else (
            echo gui_config.py not found
            echo Starting web interface instead...
            python nmea_server.py
        )
        pause
        "@ | Out-File -FilePath "start_gui.bat" -Encoding utf8
        
        # Créer .env
        @"
        ENABLE_SERIAL=true
        ENABLE_UDP=true
        ENABLE_TCP=true
        DEBUG=false
        UDP_IP=0.0.0.0
        UDP_PORT=5005
        TCP_IP=0.0.0.0
        TCP_PORT=5006
        SERIAL_PORT=COM3
        SERIAL_BAUDRATE=4800
        "@ | Out-File -FilePath ".env" -Encoding utf8

    # === CREATE ICONS ===
    - name: Create icons
      run: |
        python -c "
        from PIL import Image, ImageDraw
        import os
        
        def create_icon(size, filename, format_name):
            img = Image.new('RGBA', (size, size), (0, 0, 0, 0))
            draw = ImageDraw.Draw(img)
            
            bg_color = (25, 118, 210, 255)
            fg_color = (255, 255, 255, 255)
            
            margin = size // 16
            draw.ellipse([margin, margin, size-margin, size-margin], 
                        fill=bg_color, outline=fg_color, width=max(1, size//64))
            
            center = size // 2
            needle_size = size // 8
            draw.polygon([
                (center, center - needle_size),
                (center + needle_size//3, center),
                (center, center - needle_size//4),
                (center - needle_size//3, center),
            ], fill=fg_color)
            
            y = center + needle_size//2
            draw.line([size//4, y, 3*size//4, y], fill=fg_color, width=max(1, size//32))
            
            img.save(filename, format_name)
            return img
        
        try:
            # Create PNG icon
            create_icon(512, 'icon.png', 'PNG')
            print('✅ Created icon.png')
            
            # Create ICO for Windows
            img = create_icon(256, 'temp.png', 'PNG')
            img.save('icon.ico', 'ICO', sizes=[(16,16), (32,32), (64,64), (128,128), (256,256)])
            os.remove('temp.png')
            print('✅ Created icon.ico')
        except Exception as e:
            print(f'Error creating icons: {e}')
        "
        
    # === CREATE MACOS ICON ===
    - name: Create macOS icon
      if: runner.os == 'macOS'
      run: |
        if [ -f "icon.png" ] && [ ! -f "icon.icns" ]; then
          mkdir -p icon.iconset
          sips -z 16 16 icon.png --out icon.iconset/icon_16x16.png
          sips -z 32 32 icon.png --out icon.iconset/icon_16x16@2x.png
          sips -z 32 32 icon.png --out icon.iconset/icon_32x32.png
          sips -z 64 64 icon.png --out icon.iconset/icon_32x32@2x.png
          sips -z 128 128 icon.png --out icon.iconset/icon_128x128.png
          sips -z 256 256 icon.png --out icon.iconset/icon_128x128@2x.png
          sips -z 256 256 icon.png --out icon.iconset/icon_256x256.png
          sips -z 512 512 icon.png --out icon.iconset/icon_256x256@2x.png
          sips -z 512 512 icon.png --out icon.iconset/icon_512x512.png
          
          iconutil -c icns icon.iconset -o icon.icns
          rm -rf icon.iconset
          echo "✅ Created icon.icns"
        fi
    
    # === BUILD SERVER EXECUTABLE ===
    - name: Build NMEA Server
      run: |
        python -m PyInstaller --onefile --name "nmea_tracker_server" nmea_server.py || echo "Server build failed but continuing..."
        
    # === BUILD QT GUI EXECUTABLE ===
    - name: Build Qt GUI Application (Unix)
      if: runner.os != 'Windows'
      run: |
        ICON_FILE="icon.png"
        if [ -f "icon.icns" ] && [ "$RUNNER_OS" == "macOS" ]; then
          ICON_FILE="icon.icns"
        fi
        
        python -m PyInstaller \
          --onefile \
          --windowed \
          --name "NMEA_Server_GUI" \
          --icon "$ICON_FILE" \
          --hidden-import "PyQt6" \
          --hidden-import "PyQt6.QtCore" \
          --hidden-import "PyQt6.QtGui" \
          --hidden-import "PyQt6.QtWidgets" \
          --hidden-import "serial" \
          --hidden-import "serial.tools.list_ports" \
          gui_config.py || echo "GUI build failed but continuing..."
          
    - name: Build Qt GUI Application (Windows)
      if: runner.os == 'Windows'
      shell: pwsh
      run: |
        python -m PyInstaller `
          --onefile `
          --windowed `
          --name "NMEA_Server_GUI" `
          --icon "icon.ico" `
          --hidden-import "PyQt6" `
          --hidden-import "PyQt6.QtCore" `
          --hidden-import "PyQt6.QtGui" `
          --hidden-import "PyQt6.QtWidgets" `
          --hidden-import "serial" `
          --hidden-import "serial.tools.list_ports" `
          gui_config.py
        if ($LASTEXITCODE -ne 0) { Write-Host "GUI build failed but continuing..." }

    # === VERIFY BUILDS ===
    - name: List build artifacts
      shell: bash
      run: |
        echo "=== Build directory contents ==="
        ls -la dist/ 2>/dev/null || dir dist\ 2>/dev/null || echo "No dist directory found"
        echo ""
        echo "=== All files in current directory ==="
        ls -la 2>/dev/null || dir 2>/dev/null
        
    # === CREATE RELEASE PACKAGES (Unix) ===
    - name: Create release package (Unix)
      if: runner.os != 'Windows'
      run: |
        OS_NAME="linux"
        if [ "$RUNNER_OS" == "macOS" ]; then
          OS_NAME="macos"
        fi
        
        mkdir -p "release/$OS_NAME/"
        
        # Copy files if they exist
        [ -f "dist/nmea_tracker_server" ] && cp "dist/nmea_tracker_server" "release/$OS_NAME/" || echo "Server executable not found"
        [ -f "dist/NMEA_Server_GUI" ] && cp "dist/NMEA_Server_GUI" "release/$OS_NAME/" || echo "GUI executable not found"
        [ -f "start_gui.sh" ] && cp "start_gui.sh" "release/$OS_NAME/" || echo "start_gui.sh not found"
        [ -f "README.md" ] && cp "README.md" "release/$OS_NAME/" || echo "README.md not found"
        [ -f "LICENSE" ] && cp "LICENSE" "release/$OS_NAME/" || echo "LICENSE not found"
        
        cd release && tar -czf "nmea-tracker-$OS_NAME-x64.tar.gz" "$OS_NAME/"
        
    # === CREATE RELEASE PACKAGES (Windows) ===
    - name: Create release package (Windows)
      if: runner.os == 'Windows'
      shell: pwsh
      run: |
        New-Item -ItemType Directory -Force -Path "release/windows/"
        
        # Copy files if they exist
        if (Test-Path "dist/nmea_tracker_server.exe") { 
          Copy-Item "dist/nmea_tracker_server.exe" "release/windows/" 
        } else { 
          Write-Host "Server executable not found" 
        }
        
        if (Test-Path "dist/NMEA_Server_GUI.exe") { 
          Copy-Item "dist/NMEA_Server_GUI.exe" "release/windows/" 
        } else { 
          Write-Host "GUI executable not found" 
        }
        
        if (Test-Path "start_gui.bat") { Copy-Item "start_gui.bat" "release/windows/" }
        if (Test-Path "README.md") { Copy-Item "README.md" "release/windows/" }
        if (Test-Path "LICENSE") { Copy-Item "LICENSE" "release/windows/" }
        
        if (Test-Path "release/windows/*") {
          Compress-Archive -Path "release/windows/*" -DestinationPath "release/nmea-tracker-windows-x64.zip"
        } else {
          Write-Host "No files to archive"
        }
        
    # === UPLOAD ARTIFACTS ===
    - name: Upload release package
      uses: actions/upload-artifact@v4
      with:
        name: nmea-tracker-${{ matrix.os }}
        path: |
          release/*.tar.gz
          release/*.zip
        if-no-files-found: warn
          
  # === RELEASE JOB ===
  release:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' && contains(github.event.head_commit.message, 'release:')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      
    - name: Display structure
      run: |
        echo "=== Downloaded artifacts ==="
        find . -name "*.tar.gz" -o -name "*.zip" | head -20
        
    - name: Create Release
      uses: softprops/action-gh-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ github.run_number }}
        name: NMEA Tracker Server v${{ github.run_number }}
        body: |
          🧭 **NMEA Tracker Server with Qt GUI**
          
          ## 🌟 New Features
          - ✅ Qt Desktop GUI Application
          - ✅ Bluetooth GPS Auto-Management
          - ✅ Dual Interface (Web + Desktop)
          - ✅ Real-time GPS monitoring
          
          ## 📦 Downloads
          - **Windows**: `nmea-tracker-windows-x64.zip`
          - **Linux**: `nmea-tracker-linux-x64.tar.gz` 
          - **macOS**: `nmea-tracker-macos-x64.tar.gz`
          
          ## 🚀 Quick Start
          1. Download package for your OS
          2. Extract files
          3. Run `NMEA_Server_GUI` for desktop interface
          4. Or run `nmea_tracker_server` for web interface
          
          ## 🔧 Features
          - Web interface: `https://localhost:5000`
          - Qt GUI: Native desktop application
          - Auto Bluetooth GPS discovery (Linux)
          - Multi-protocol support (Serial/UDP/TCP)
        draft: false
        prerelease: false
        files: |
          **/*.tar.gz
          **/*.zip