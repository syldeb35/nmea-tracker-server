# SPDX-License-Identifier: GPL-3.0-or-later
# GitHub Actions pour créer des exécutables multi-plateformes
# GitHub Actions pour build cross-platform
name: Build Cross-Platform Executables

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false  # Continue même si un job échoue
      matrix:
        include:
          - os: ubuntu-latest
            arch: linux
            ext: ""
            separator: ":"
          - os: windows-latest
            arch: windows
            ext: ".exe"
            separator: ";"
          - os: macos-latest
            arch: macos
            ext: ""
            separator: ":"
          - os: macos-13  # Intel Mac
            arch: macos-intel
            ext: ""
            separator: ":"

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Upgrade pip
      run: |
        python -m pip install --upgrade pip --quiet
        pip --version
    
    - name: Verify project structure (Unix)
      if: matrix.os != 'windows-latest'
      run: |
        echo "=== Project Structure ==="
        ls -la
        echo "=== Templates directory ==="
        ls -la templates/ || echo "Templates directory not found"
        echo "=== Python files ==="
        ls -la *.py || echo "No Python files found"
    
    - name: Verify project structure (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        echo "=== Project Structure ==="
        Get-ChildItem -Force
        echo "=== Templates directory ==="
        if (Test-Path "templates") { Get-ChildItem templates -Force } else { echo "Templates directory not found" }
        echo "=== Python files ==="
        if (Get-ChildItem "*.py" -ErrorAction SilentlyContinue) { Get-ChildItem "*.py" } else { echo "No Python files found" }
      shell: pwsh
    
    - name: Create missing files if needed (Unix)
      if: matrix.os != 'windows-latest'
      run: |
        echo "=== Creating missing SSL certificates ==="
        if [ ! -f "cert.pem" ]; then
          echo "Creating dummy cert.pem"
          echo "# Dummy certificate for build" > cert.pem
        fi
        if [ ! -f "key.pem" ]; then
          echo "Creating dummy key.pem"
          echo "# Dummy key for build" > key.pem
        fi
      shell: bash
    
    - name: Create missing files if needed (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        echo "=== Creating missing SSL certificates ==="
        if (-not (Test-Path "cert.pem")) {
          echo "Creating dummy cert.pem"
          "# Dummy certificate for build" | Out-File -FilePath "cert.pem" -Encoding UTF8
        }
        if (-not (Test-Path "key.pem")) {
          echo "Creating dummy key.pem"
          "# Dummy key for build" | Out-File -FilePath "key.pem" -Encoding UTF8
        }
      shell: pwsh
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip --quiet
        pip install -r requirements.txt --quiet
        pip install pyinstaller --quiet
    
    - name: Build executable (Unix)
      if: matrix.os != 'windows-latest'
      run: |
        # Créer un fichier .spec personnalisé pour cette plateforme
        cp nmea_server.spec "nmea_tracker_server_${{ matrix.arch }}.spec"
        
        # Modifier le nom de l'exécutable dans le .spec (compatible macOS/Linux)
        python3 scripts/common/modify_spec.py "nmea_tracker_server_${{ matrix.arch }}.spec" "${{ matrix.arch }}"
        
        # Build avec le fichier .spec
        pyinstaller "nmea_tracker_server_${{ matrix.arch }}.spec"
    
    - name: Build executable (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        # Créer un fichier .spec personnalisé pour Windows
        copy nmea_server.spec "nmea_tracker_server_${{ matrix.arch }}.spec"
        
        # Modifier le nom de l'exécutable dans le .spec (PowerShell)
        (Get-Content "nmea_tracker_server_${{ matrix.arch }}.spec") -replace "name='nmea_tracker_server'", "name='nmea_tracker_server_${{ matrix.arch }}'" | Set-Content "nmea_tracker_server_${{ matrix.arch }}.spec"
        
        # Build avec le fichier .spec
        pyinstaller "nmea_tracker_server_${{ matrix.arch }}.spec"
      shell: pwsh
    
    - name: Verify build (Unix)
      if: matrix.os != 'windows-latest'
      run: |
        echo "=== Build verification ==="
        ls -la dist/
        
        # Construct filename based on actual matrix arch value
        file_name="nmea_tracker_server_${{ matrix.arch }}"
        
        echo "Looking for file: $file_name"
        if [ -f "dist/$file_name" ]; then
          echo "[OK] Build successful: $file_name"
          ls -lh "dist/$file_name"
        else
          echo "[FAIL] Build failed: $file_name not found"
          echo "Available files in dist/:"
          ls -la dist/
          exit 1
        fi
      shell: bash
    
    - name: Verify build (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        echo "=== Build verification ==="
        Get-ChildItem dist
        
        # Construct filename for Windows using matrix values
        $file_name = "nmea_tracker_server_${{ matrix.arch }}${{ matrix.ext }}"
        
        Write-Output "Looking for file: $file_name"
        if (Test-Path "dist\$file_name") {
          Write-Output "[OK] Build successful: $file_name"
          Get-ChildItem "dist\$file_name"
        } else {
          Write-Output "[FAIL] Build failed: $file_name not found"
          Write-Output "Available files in dist/:"
          Get-ChildItem dist
          exit 1
        }
      shell: pwsh
    
    - name: Upload artifacts (Linux)
      if: matrix.os == 'ubuntu-latest'
      uses: actions/upload-artifact@v4
      with:
        name: nmea_tracker_server_${{ matrix.arch }}
        path: dist/nmea_tracker_server_${{ matrix.arch }}
        retention-days: 30
    
    - name: Upload artifacts (macOS)
      if: matrix.os == 'macos-latest' || matrix.os == 'macos-13'
      uses: actions/upload-artifact@v4
      with:
        name: nmea_tracker_server_${{ matrix.arch }}
        path: dist/nmea_tracker_server_${{ matrix.arch }}
        retention-days: 30
    
    - name: Upload artifacts (Windows)
      if: matrix.os == 'windows-latest'
      uses: actions/upload-artifact@v4
      with:
        name: nmea_tracker_server_${{ matrix.arch }}
        path: dist/nmea_tracker_server_${{ matrix.arch }}${{ matrix.ext }}
        retention-days: 30
