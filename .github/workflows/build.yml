# SPDX-License-Identifier: GPL-3.0-or-later
# GitHub Actions to build NMEA Tracker Server executables
name: üèóÔ∏è Build NMEA Tracker Server

on:
  push:
    tags:
      - 'v*'
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      build_target:
        description: 'Build target'
        required: true
        default: 'all'
        type: choice
        options:
          - 'all'
          - 'server-only'
          - 'tray-only'
          - 'manager-only'

env:
  PYTHON_VERSION: '3.13'

jobs:
  build-windows:
    name: Build Windows Applications
    runs-on: windows-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller cryptography
    
    - name: Verify project structure
      run: |
        echo "=== Project Structure ==="
        Get-ChildItem -Force
        echo ""
        echo "=== Python files ==="
        Get-ChildItem "*.py" | Select-Object Name, Length
        echo ""
        echo "=== Spec files ==="
        Get-ChildItem "*.spec" | Select-Object Name, Length
        echo ""
        echo "=== Templates directory ==="
        if (Test-Path "templates") { 
          Get-ChildItem templates -Force | Select-Object Name, Length
        } else { 
          echo "Templates directory not found" 
        }
      shell: pwsh
    
    - name: üîê Create SSL certificates
      run: |
        echo "Creating SSL certificates for build..."
        python -c "
        from cryptography import x509
        from cryptography.hazmat.primitives import hashes, serialization
        from cryptography.hazmat.primitives.asymmetric import rsa
        from datetime import datetime, timedelta
        
        # Generate private key
        private_key = rsa.generate_private_key(public_exponent=65537, key_size=2048)
        
        # Create certificate
        subject = issuer = x509.Name([
            x509.NameAttribute(x509.NameOID.COMMON_NAME, 'localhost'),
        ])
        
        cert = x509.CertificateBuilder().subject_name(
            subject
        ).issuer_name(
            issuer
        ).public_key(
            private_key.public_key()
        ).serial_number(
            x509.random_serial_number()
        ).not_valid_before(
            datetime.utcnow()
        ).not_valid_after(
            datetime.utcnow() + timedelta(days=365)
        ).sign(private_key, hashes.SHA256())
        
        # Save certificate and private key
        with open('cert.pem', 'wb') as f:
            f.write(cert.public_bytes(serialization.Encoding.PEM))
        
        with open('key.pem', 'wb') as f:
            f.write(private_key.private_bytes(
                encoding=serialization.Encoding.PEM,
                format=serialization.PrivateFormat.PKCS8,
                encryption_algorithm=serialization.NoEncryption()
            ))
        
        print('SSL certificates created successfully')
        "
    
    - name: üèóÔ∏è Build NMEA Server (Console)
      if: ${{ github.event.inputs.build_target == 'all' || github.event.inputs.build_target == 'server-only' || github.event.inputs.build_target == '' }}
      run: |
        echo "Building NMEA Server (Console version)..."
        pyinstaller nmea_server.spec --clean --noconfirm
        
        if (Test-Path "dist/nmea_tracker_server.exe") {
          echo "SUCCESS: NMEA Server build successful"
          $size = (Get-Item "dist/nmea_tracker_server.exe").Length
          echo "File size: $([math]::Round($size/1MB, 2)) MB"
        } else {
          echo "ERROR: NMEA Server build failed"
          exit 1
        }
      shell: pwsh
    
    - name: üéØ Build NMEA Server Tray
      if: ${{ github.event.inputs.build_target == 'all' || github.event.inputs.build_target == 'tray-only' || github.event.inputs.build_target == '' }}
      run: |
        echo "Building NMEA Server System Tray..."
        pyinstaller nmea_server_tray.spec --clean --noconfirm
        
        if (Test-Path "dist/nmea_server_tray.exe") {
          echo "SUCCESS: NMEA Server Tray build successful"
          $size = (Get-Item "dist/nmea_server_tray.exe").Length
          echo "File size: $([math]::Round($size/1MB, 2)) MB"
        } else {
          echo "ERROR: NMEA Server Tray build failed"
          exit 1
        }
      shell: pwsh
    
    - name: üîß Build NMEA Server Manager
      if: ${{ github.event.inputs.build_target == 'all' || github.event.inputs.build_target == 'manager-only' || github.event.inputs.build_target == '' }}
      run: |
        echo "Building NMEA Server Manager..."
        pyinstaller nmea_server_manager.spec --clean --noconfirm
        
        if (Test-Path "dist/nmea_server_manager.exe") {
          echo "SUCCESS: NMEA Server Manager build successful"
          $size = (Get-Item "dist/nmea_server_manager.exe").Length
          echo "File size: $([math]::Round($size/1MB, 2)) MB"
        } else {
          echo "ERROR: NMEA Server Manager build failed"
          exit 1
        }
      shell: pwsh
    
    - name: üìã Build summary
      run: |
        echo "=== Build Summary ==="
        echo ""
        echo "Built executables:"
        if (Test-Path "dist") {
          Get-ChildItem "dist/*.exe" | ForEach-Object {
            $size = [math]::Round($_.Length/1MB, 2)
            echo "  SUCCESS: $($_.Name) - ${size} MB"
          }
        } else {
          echo "  ERROR: No executables found in dist/ directory"
        }
        echo ""
        echo "Build completed successfully!"
      shell: pwsh
    
    - name: üì§ Upload NMEA Server
      if: ${{ github.event.inputs.build_target == 'all' || github.event.inputs.build_target == 'server-only' || github.event.inputs.build_target == '' }}
      uses: actions/upload-artifact@v4
      with:
        name: nmea-tracker-server-console
        path: dist/nmea_tracker_server.exe
        retention-days: 30
    
    - name: üì§ Upload NMEA Server Tray
      if: ${{ github.event.inputs.build_target == 'all' || github.event.inputs.build_target == 'tray-only' || github.event.inputs.build_target == '' }}
      uses: actions/upload-artifact@v4
      with:
        name: nmea-tracker-server-tray
        path: dist/nmea_server_tray.exe
        retention-days: 30
    
    - name: üì§ Upload NMEA Server Test
      if: ${{ github.event.inputs.build_target == 'all' || github.event.inputs.build_target == 'test-only' || github.event.inputs.build_target == '' }}
      uses: actions/upload-artifact@v4
      with:
        name: nmea-tracker-server-test
        path: dist/nmea_server.exe
        retention-days: 30
    
    - name: üì§ Upload NMEA Server Manager
      if: ${{ github.event.inputs.build_target == 'all' || github.event.inputs.build_target == 'manager-only' || github.event.inputs.build_target == '' }}
      uses: actions/upload-artifact@v4
      with:
        name: nmea-tracker-server-manager
        path: dist/nmea_server_manager.exe
        retention-days: 30
