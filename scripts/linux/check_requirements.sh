#!/bin/bash

echo "===== V√©rification des pr√©requis (Linux) ====="
echo

# D√©finir le r√©pertoire du projet
PROJECT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")/../.." && pwd)"
cd "$PROJECT_DIR"

echo "üìÅ R√©pertoire de travail: $PROJECT_DIR"
echo

# V√©rifier Python
echo "üêç V√©rification de Python..."
if command -v python3 >/dev/null 2>&1; then
    echo "‚úÖ Python3 trouv√©: $(which python3)"
    echo "   Version: $(python3 --version)"
elif command -v python >/dev/null 2>&1; then
    echo "‚úÖ Python trouv√©: $(which python)"
    echo "   Version: $(python --version)"
else
    echo "‚ùå Python non trouv√©! Veuillez installer Python 3.8+"
    echo "   Ubuntu/Debian: sudo apt install python3 python3-pip python3-venv"
    echo "   CentOS/RHEL: sudo yum install python3 python3-pip"
    echo "   Arch: sudo pacman -S python python-pip"
    echo "   Fedora: sudo dnf install python3 python3-pip"
    exit 1
fi
echo

# V√©rifier pip
echo "üì¶ V√©rification de pip..."
if command -v pip3 >/dev/null 2>&1; then
    echo "‚úÖ pip3 trouv√©: $(which pip3)"
    echo "   Version: $(pip3 --version)"
elif command -v pip >/dev/null 2>&1; then
    echo "‚úÖ pip trouv√©: $(which pip)"
    echo "   Version: $(pip --version)"
else
    echo "‚ùå pip non trouv√©! Veuillez installer pip"
    exit 1
fi
echo

# V√©rifier l'environnement virtuel
echo "üåç V√©rification de l'environnement virtuel..."
if [ -d ".venv" ]; then
    echo "‚úÖ Environnement virtuel '.venv' trouv√©"
    if [ -f ".venv/bin/activate" ]; then
        echo "‚úÖ Script d'activation trouv√©"
    else
        echo "‚ùå Script d'activation manquant"
    fi
elif [ -d "venv" ]; then
    echo "‚úÖ Environnement virtuel 'venv' trouv√©"
    if [ -f "venv/bin/activate" ]; then
        echo "‚úÖ Script d'activation trouv√©"
    else
        echo "‚ùå Script d'activation manquant"
    fi
else
    echo "‚ö†Ô∏è  Aucun environnement virtuel trouv√©"
    echo "   Recommandation: python3 -m venv .venv"
fi
echo

# V√©rifier les fichiers requis
echo "üìÑ V√©rification des fichiers requis..."
files=("requirements.txt" "nmea_server.py" "nmea_server.spec")
for file in "${files[@]}"; do
    if [ -f "$file" ]; then
        echo "‚úÖ $file trouv√©"
    else
        echo "‚ùå $file manquant"
    fi
done
echo

# V√©rifier PyInstaller
echo "üîß V√©rification de PyInstaller..."
if command -v pyinstaller >/dev/null 2>&1; then
    echo "‚úÖ PyInstaller trouv√©: $(which pyinstaller)"
    echo "   Version: $(pyinstaller --version)"
else
    echo "‚ö†Ô∏è  PyInstaller non trouv√© (sera install√© automatiquement)"
fi
echo

# V√©rifier les permissions s√©rie
echo "üîå V√©rification des ports s√©rie..."
if ls /dev/ttyUSB* >/dev/null 2>&1; then
    for port in /dev/ttyUSB*; do
        if [ -r "$port" ] && [ -w "$port" ]; then
            echo "‚úÖ $port (accessible)"
        else
            echo "‚ö†Ô∏è  $port (permissions insuffisantes)"
            echo "   Solution: sudo chmod 666 $port"
            echo "   ou: sudo usermod -a -G dialout \$USER (puis red√©marrer)"
        fi
    done
else
    echo "‚ÑπÔ∏è  Aucun port USB s√©rie d√©tect√©"
fi

if ls /dev/rfcomm* >/dev/null 2>&1; then
    for port in /dev/rfcomm*; do
        if [ -r "$port" ] && [ -w "$port" ]; then
            echo "‚úÖ $port (Bluetooth accessible)"
        else
            echo "‚ö†Ô∏è  $port (permissions Bluetooth insuffisantes)"
        fi
    done
else
    echo "‚ÑπÔ∏è  Aucun port Bluetooth d√©tect√©"
fi
echo

# R√©sum√©
echo "üìã R√âSUM√â:"
echo "   Pour cr√©er un environnement virtuel:"
echo "     python3 -m venv .venv"
echo "     source .venv/bin/activate"
echo "     pip install -r requirements.txt"
echo
echo "   Pour builder:"
echo "     ./scripts/linux/build.sh"
echo
