name: Build Qt GUI Application

on:
  push:
    branches: [ main, develop, qt-gui ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    # === LINUX SETUP ===
    - name: Install Qt dependencies (Linux)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          qt6-base-dev \
          qt6-tools-dev \
          libgl1-mesa-dev \
          libegl1-mesa-dev \
          libxcb-xinerama0 \
          libxcb-cursor0 \
          libbluetooth-dev \
          bluez \
          bluez-tools
        
    # === MACOS SETUP ===
    - name: Install Qt dependencies (macOS)
      if: runner.os == 'macOS'
      run: |
        brew install qt6
        
    # === WINDOWS SETUP ===
    - name: Install Qt dependencies (Windows)
      if: runner.os == 'Windows'
      run: |
        # Qt sera installé via pip install PyQt6
        echo "Qt will be installed via PyQt6 pip package"
        
    # === PYTHON DEPENDENCIES ===
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pyinstaller
        # Créer requirements_gui.txt s'il n'existe pas
        if [ ! -f "requirements_gui.txt" ]; then
          echo "PyQt6>=6.0.0" > requirements_gui.txt
          echo "pyserial>=3.5" >> requirements_gui.txt
        fi
        pip install -r requirements.txt
        pip install -r requirements_gui.txt
        
    # === CREATE MISSING FILES ===
    - name: Create missing files
      run: |
        # Créer start_gui.sh s'il n'existe pas
        if [ ! -f "start_gui.sh" ]; then
          cat > start_gui.sh << 'EOF'
        #!/bin/bash
        echo "🚀 Starting NMEA Server GUI..."
        if [ -f "gui_config.py" ]; then
            echo "Starting Qt GUI..."
            python gui_config.py
        else
            echo "❌ gui_config.py not found"
            echo "Starting web interface instead..."
            python nmea_server.py
        fi
        EOF
          chmod +x start_gui.sh
        fi
        
        # Créer start_gui.bat pour Windows
        cat > start_gui.bat << 'EOF'
        @echo off
        echo 🚀 Starting NMEA Server GUI...
        if exist gui_config.py (
            echo Starting Qt GUI...
            python gui_config.py
        ) else (
            echo gui_config.py not found
            echo Starting web interface instead...
            python nmea_server.py
        )
        pause
        EOF
        
        # Créer .env par défaut s'il n'existe pas
        if [ ! -f ".env" ]; then
          cat > .env << 'EOF'
        ENABLE_SERIAL=true
        ENABLE_UDP=true
        ENABLE_TCP=true
        DEBUG=false
        UDP_IP=0.0.0.0
        UDP_PORT=5005
        TCP_IP=0.0.0.0
        TCP_PORT=5006
        SERIAL_PORT=/dev/ttyUSB0
        SERIAL_BAUDRATE=4800
        EOF
        fi

    # === CREATE ICONS IF MISSING ===
    - name: Create icons if missing
      run: |
        pip install Pillow
        python -c "
        from PIL import Image, ImageDraw
        import os
        
        def create_icon(size, filename, format_name):
            img = Image.new('RGBA', (size, size), (0, 0, 0, 0))
            draw = ImageDraw.Draw(img)
            
            bg_color = (25, 118, 210, 255)
            fg_color = (255, 255, 255, 255)
            
            margin = size // 16
            draw.ellipse([margin, margin, size-margin, size-margin], 
                        fill=bg_color, outline=fg_color, width=max(1, size//64))
            
            center = size // 2
            needle_size = size // 8
            draw.polygon([
                (center, center - needle_size),
                (center + needle_size//3, center),
                (center, center - needle_size//4),
                (center - needle_size//3, center),
            ], fill=fg_color)
            
            y = center + needle_size//2
            draw.line([size//4, y, 3*size//4, y], fill=fg_color, width=max(1, size//32))
            
            img.save(filename, format_name)
            return img
        
        # Create icons
        if not os.path.exists('icon.png'):
            create_icon(512, 'icon.png', 'PNG')
            print('✅ Created icon.png')
            
        if not os.path.exists('icon.ico'):
            img = create_icon(256, 'temp.png', 'PNG')
            img.save('icon.ico', 'ICO', sizes=[(16,16), (32,32), (64,64), (128,128), (256,256)])
            os.remove('temp.png')
            print('✅ Created icon.ico')
        "
        
    # === CREATE MACOS ICON ===
    - name: Create macOS icon
      if: runner.os == 'macOS'
      run: |
        if [ ! -f "icon.icns" ] && [ -f "icon.png" ]; then
          mkdir -p icon.iconset
          sips -z 16 16 icon.png --out icon.iconset/icon_16x16.png
          sips -z 32 32 icon.png --out icon.iconset/icon_16x16@2x.png
          sips -z 32 32 icon.png --out icon.iconset/icon_32x32.png
          sips -z 64 64 icon.png --out icon.iconset/icon_32x32@2x.png
          sips -z 128 128 icon.png --out icon.iconset/icon_128x128.png
          sips -z 256 256 icon.png --out icon.iconset/icon_128x128@2x.png
          sips -z 256 256 icon.png --out icon.iconset/icon_256x256.png
          sips -z 512 512 icon.png --out icon.iconset/icon_256x256@2x.png
          sips -z 512 512 icon.png --out icon.iconset/icon_512x512.png
          
          iconutil -c icns icon.iconset -o icon.icns
          rm -rf icon.iconset
          echo "✅ Created icon.icns"
        fi
    
    # === BUILD SERVER EXECUTABLE ===
    - name: Build NMEA Server
      run: |
        # Utiliser une commande PyInstaller simple si le .spec n'existe pas
        if [ -f "nmea_server.spec" ]; then
          pyinstaller nmea_server.spec --clean --noconfirm
        else
          pyinstaller --onefile \
            --name "nmea_tracker_server" \
            --add-data "templates:templates" \
            --add-data "cert.pem:." \
            --add-data "key.pem:." \
            --add-data ".env:.env" \
            nmea_server.py
        fi
        
    # === BUILD QT GUI EXECUTABLE ===
    - name: Build Qt GUI Application (macOS)
      if: runner.os == 'macOS'
      run: |
        ICON_FILE="icon.png"
        if [ -f "icon.icns" ]; then
          ICON_FILE="icon.icns"
        fi
        
        pyinstaller --onefile \
          --windowed \
          --name "NMEA_Server_GUI" \
          --icon "$ICON_FILE" \
          --add-data "templates:templates" \
          --add-data "cert.pem:." \
          --add-data "key.pem:." \
          --add-data ".env:.env" \
          --hidden-import "PyQt6" \
          --hidden-import "serial" \
          --hidden-import "serial.tools.list_ports" \
          gui_config.py
          
    - name: Build Qt GUI Application (Linux)
      if: runner.os == 'Linux'
      run: |
        pyinstaller --onefile \
          --windowed \
          --name "NMEA_Server_GUI" \
          --icon "icon.png" \
          --add-data "templates:templates" \
          --add-data "cert.pem:." \
          --add-data "key.pem:." \
          --add-data ".env:.env" \
          --hidden-import "PyQt6" \
          --hidden-import "serial" \
          --hidden-import "serial.tools.list_ports" \
          gui_config.py
          
    - name: Build Qt GUI Application (Windows)
      if: runner.os == 'Windows'
      shell: pwsh
      run: |
        pyinstaller --onefile `
          --windowed `
          --name "NMEA_Server_GUI" `
          --icon "icon.ico" `
          --add-data "templates;templates" `
          --add-data "cert.pem;." `
          --add-data "key.pem;." `
          --add-data ".env;.env" `
          --hidden-import "PyQt6" `
          --hidden-import "serial" `
          --hidden-import "serial.tools.list_ports" `
          gui_config.py

    # === VERIFY BUILDS ===
    - name: Verify executables (Unix)
      if: runner.os != 'Windows'
      shell: bash
      run: |
        echo "=== Build artifacts ==="
        ls -la dist/
        echo ""
        echo "=== Server executable ==="
        file dist/nmea_tracker_server || echo "Server executable not found"
        echo ""
        echo "=== GUI executable ==="
        file dist/NMEA_Server_GUI || echo "GUI executable not found"
        
    - name: Verify executables (Windows)
      if: runner.os == 'Windows'
      shell: pwsh
      run: |
        Write-Host "=== Build artifacts ==="
        Get-ChildItem dist/
        Write-Host ""
        Write-Host "=== Server executable ==="
        if (Test-Path "dist/nmea_tracker_server.exe") { 
          Get-ItemProperty "dist/nmea_tracker_server.exe" | Select-Object Name, Length, LastWriteTime
        } else { 
          Write-Host "Server executable not found" 
        }
        Write-Host ""
        Write-Host "=== GUI executable ==="
        if (Test-Path "dist/NMEA_Server_GUI.exe") { 
          Get-ItemProperty "dist/NMEA_Server_GUI.exe" | Select-Object Name, Length, LastWriteTime
        } else { 
          Write-Host "GUI executable not found" 
        }
        
    # === TEST GUI HELP (NON-INTERACTIVE) ===
    - name: Test GUI startup (Linux)
      if: runner.os == 'Linux'
      run: |
        # Test GUI startup with virtual display
        export QT_QPA_PLATFORM=offscreen
        timeout 10s ./dist/NMEA_Server_GUI --help || echo "GUI help test completed"
        
    - name: Test GUI startup (Windows)  
      if: runner.os == 'Windows'
      shell: pwsh
      run: |
        # Test GUI startup (will fail without display but should not crash immediately)
        Start-Process -FilePath "dist/NMEA_Server_GUI.exe" -ArgumentList "--help" -Wait -NoNewWindow -PassThru | Out-Null
        Write-Host "GUI startup test completed"
        
    - name: Test GUI startup (macOS)
      if: runner.os == 'macOS'
      run: |
        # Test GUI startup with virtual display
        timeout 10s ./dist/NMEA_Server_GUI --help || echo "GUI help test completed"
        
    # === CREATE RELEASE PACKAGES ===
    - name: Create release package (Linux)
      if: runner.os == 'Linux'
      run: |
        mkdir -p release/linux/
        cp dist/nmea_tracker_server release/linux/
        cp dist/NMEA_Server_GUI release/linux/
        cp start_gui.sh release/linux/
        cp README.md release/linux/
        cp LICENSE release/linux/ 2>/dev/null || echo "LICENSE not found"
        cd release && tar -czf nmea-tracker-linux-x64.tar.gz linux/
        
    - name: Create release package (Windows)
      if: runner.os == 'Windows'
      shell: pwsh
      run: |
        New-Item -ItemType Directory -Force -Path "release/windows/"
        Copy-Item "dist/nmea_tracker_server.exe" "release/windows/"
        Copy-Item "dist/NMEA_Server_GUI.exe" "release/windows/"
        Copy-Item "start_gui.bat" "release/windows/"
        Copy-Item "README.md" "release/windows/"
        if (Test-Path "LICENSE") { Copy-Item "LICENSE" "release/windows/" }
        Compress-Archive -Path "release/windows/*" -DestinationPath "release/nmea-tracker-windows-x64.zip"
        
    - name: Create release package (macOS)
      if: runner.os == 'macOS'
      run: |
        mkdir -p release/macos/
        cp dist/nmea_tracker_server release/macos/
        cp dist/NMEA_Server_GUI release/macos/
        cp start_gui.sh release/macos/
        cp README.md release/macos/
        cp LICENSE release/macos/ 2>/dev/null || echo "LICENSE not found"
        cd release && tar -czf nmea-tracker-macos-x64.tar.gz macos/
        
    # === UPLOAD ARTIFACTS ===
    - name: Upload server artifact
      uses: actions/upload-artifact@v4
      with:
        name: nmea-server-${{ matrix.os }}
        path: |
          dist/nmea_tracker_server*
          
    - name: Upload GUI artifact
      uses: actions/upload-artifact@v4
      with:
        name: nmea-gui-${{ matrix.os }}
        path: |
          dist/NMEA_Server_GUI*
          
    - name: Upload release package
      uses: actions/upload-artifact@v4
      with:
        name: nmea-tracker-complete-${{ matrix.os }}
        path: |
          release/*.tar.gz
          release/*.zip
          
  # === RELEASE JOB ===
  release:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      
    - name: Display structure
      run: |
        echo "=== Downloaded artifacts ==="
        find . -name "*.exe" -o -name "nmea_tracker_server*" -o -name "NMEA_Server_GUI*" -o -name "*.tar.gz" -o -name "*.zip"
        
    - name: Create Release
      if: github.event_name == 'push' && contains(github.event.head_commit.message, 'release:')
      uses: softprops/action-gh-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ github.run_number }}
        name: NMEA Tracker Server v${{ github.run_number }}
        body: |
          🧭 **NMEA Tracker Server with Qt GUI**
          
          ## 🌟 New Features
          - ✅ Qt Desktop GUI Application
          - ✅ Bluetooth GPS Auto-Management
          - ✅ Dual Interface (Web + Desktop)
          - ✅ Real-time GPS monitoring
          
          ## 📦 Downloads
          - **Windows**: `nmea-tracker-windows-x64.zip`
          - **Linux**: `nmea-tracker-linux-x64.tar.gz` 
          - **macOS**: `nmea-tracker-macos-x64.tar.gz`
          
          ## 🚀 Quick Start
          1. Download package for your OS
          2. Extract files
          3. Run `NMEA_Server_GUI` for desktop interface
          4. Or run `nmea_tracker_server` for web interface
          
          ## 🔧 Features
          - Web interface: `https://localhost:5000`
          - Qt GUI: Native desktop application
          - Auto Bluetooth GPS discovery (Linux)
          - Multi-protocol support (Serial/UDP/TCP)
        draft: false
        prerelease: false
        files: |
          **/*.tar.gz
          **/*.zip