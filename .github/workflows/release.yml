name: üöÄ Release NMEA Tracker Server

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.3.0)'
        required: true
        default: 'v1.3.0'

env:
  PYTHON_VERSION: '3.13'

jobs:
  release-builds:
    name: üéØ Build Release Versions
    runs-on: windows-latest
    
    steps:
    - name: üì• Checkout
      uses: actions/checkout@v4

    - name: üêç Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: üì¶ Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller cryptography

    - name: üîê Generate SSL Certificates
      run: |
        python -c "
        from cryptography import x509
        from cryptography.hazmat.primitives import hashes, serialization
        from cryptography.hazmat.primitives.asymmetric import rsa
        from datetime import datetime, timedelta
        
        # Generate key and certificate
        private_key = rsa.generate_private_key(public_exponent=65537, key_size=2048)
        subject = issuer = x509.Name([x509.NameAttribute(x509.NameOID.COMMON_NAME, 'localhost')])
        cert = x509.CertificateBuilder().subject_name(subject).issuer_name(issuer).public_key(private_key.public_key()).serial_number(x509.random_serial_number()).not_valid_before(datetime.utcnow()).not_valid_after(datetime.utcnow() + timedelta(days=365)).sign(private_key, hashes.SHA256())
        
        # Save files
        with open('cert.pem', 'wb') as f: f.write(cert.public_bytes(serialization.Encoding.PEM))
        with open('key.pem', 'wb') as f: f.write(private_key.private_bytes(encoding=serialization.Encoding.PEM, format=serialization.PrivateFormat.PKCS8, encryption_algorithm=serialization.NoEncryption()))
        print('SSL certificates generated')
        "

    - name: üèóÔ∏è Build All Versions
      run: |
        # Clean previous builds
        if (Test-Path "dist") { Remove-Item -Recurse -Force "dist" }
        New-Item -ItemType Directory -Path "dist" -Force
        
        # Build Console Server version
        echo "üñ•Ô∏è Building Console Server version..."
        pyinstaller nmea_server.spec --clean --noconfirm
        if (Test-Path "dist/nmea_tracker_server.exe") {
            Rename-Item "dist/nmea_tracker_server.exe" "dist/nmea_tracker_server_console.exe"
            echo "‚úÖ Console Server version built"
        }
        
        # Build System Tray version  
        echo "üéØ Building System Tray version..."
        pyinstaller nmea_server_tray.spec --clean --noconfirm
        if (Test-Path "dist/nmea_server_tray.exe") {
            echo "‚úÖ System Tray version built"
        }
        
        # Build Test Server version
        echo "üß™ Building Test Server version..."
        pyinstaller nmea_server_test.spec --clean --noconfirm
        if (Test-Path "dist/nmea_server_test.exe") {
            echo "‚úÖ Test Server version built"
        }
        
        # Build Manager version
        echo "üîß Building Manager version..."
        pyinstaller nmea_server_manager.spec --clean --noconfirm
        if (Test-Path "dist/nmea_server_manager.exe") {
            echo "‚úÖ Manager version built"
        }

    - name: üìã Create Package
      run: |
        # Create release package structure
        New-Item -ItemType Directory -Path "release_package" -Force
        
        # Copy executables
        Copy-Item "dist/*.exe" "release_package/" -Force
        
        # Copy documentation
        if (Test-Path "README.md") { Copy-Item "README.md" "release_package/" -Force }
        if (Test-Path "CHANGELOG.md") { Copy-Item "CHANGELOG.md" "release_package/" -Force }
        if (Test-Path "LICENSE") { Copy-Item "LICENSE" "release_package/" -Force }
        
        # Copy templates and configuration files
        if (Test-Path "templates") { 
          Copy-Item "templates" "release_package/" -Recurse -Force 
        }
        
        # Create quick start guide
        echo "# NMEA Tracker Server - Quick Start Guide" | Out-File -FilePath "release_package/QUICK_START.md" -Encoding UTF8
        echo "" | Out-File -FilePath "release_package/QUICK_START.md" -Append -Encoding UTF8
        echo "## Available Applications" | Out-File -FilePath "release_package/QUICK_START.md" -Append -Encoding UTF8
        echo "" | Out-File -FilePath "release_package/QUICK_START.md" -Append -Encoding UTF8
        echo "### üéØ nmea_server_tray.exe (RECOMMENDED)" | Out-File -FilePath "release_package/QUICK_START.md" -Append -Encoding UTF8
        echo "System Tray Application - Runs in the background with system tray icon" | Out-File -FilePath "release_package/QUICK_START.md" -Append -Encoding UTF8
        echo "Best for most users - Easy to use, starts/stops server from tray menu" | Out-File -FilePath "release_package/QUICK_START.md" -Append -Encoding UTF8
        echo "Features: System tray management, web interface access, automatic startup" | Out-File -FilePath "release_package/QUICK_START.md" -Append -Encoding UTF8
        echo "" | Out-File -FilePath "release_package/QUICK_START.md" -Append -Encoding UTF8
        echo "### üñ•Ô∏è nmea_tracker_server_console.exe" | Out-File -FilePath "release_package/QUICK_START.md" -Append -Encoding UTF8
        echo "Console Application - Main server application" | Out-File -FilePath "release_package/QUICK_START.md" -Append -Encoding UTF8
        echo "For advanced users - Direct server execution with console output" | Out-File -FilePath "release_package/QUICK_START.md" -Append -Encoding UTF8
        echo "Features: Full server functionality, console logging, command-line options" | Out-File -FilePath "release_package/QUICK_START.md" -Append -Encoding UTF8
        echo "" | Out-File -FilePath "release_package/QUICK_START.md" -Append -Encoding UTF8
        echo "### üß™ nmea_server_test.exe" | Out-File -FilePath "release_package/QUICK_START.md" -Append -Encoding UTF8
        echo "Test Version - Development and testing server" | Out-File -FilePath "release_package/QUICK_START.md" -Append -Encoding UTF8
        echo "For developers - Enhanced debugging and testing features" | Out-File -FilePath "release_package/QUICK_START.md" -Append -Encoding UTF8
        echo "Features: Debug mode, extended logging, development tools" | Out-File -FilePath "release_package/QUICK_START.md" -Append -Encoding UTF8
        echo "" | Out-File -FilePath "release_package/QUICK_START.md" -Append -Encoding UTF8
        echo "### üîß nmea_server_manager.exe" | Out-File -FilePath "release_package/QUICK_START.md" -Append -Encoding UTF8
        echo "GUI Manager - Graphical interface for server management" | Out-File -FilePath "release_package/QUICK_START.md" -Append -Encoding UTF8
        echo "For users who prefer GUI - Visual interface for configuration and control" | Out-File -FilePath "release_package/QUICK_START.md" -Append -Encoding UTF8
        echo "Features: GUI configuration, server status monitoring, log viewing" | Out-File -FilePath "release_package/QUICK_START.md" -Append -Encoding UTF8
        echo "" | Out-File -FilePath "release_package/QUICK_START.md" -Append -Encoding UTF8
        echo "## Quick Start" | Out-File -FilePath "release_package/QUICK_START.md" -Append -Encoding UTF8
        echo "" | Out-File -FilePath "release_package/QUICK_START.md" -Append -Encoding UTF8
        echo "1. Easy Start: Double-click nmea_server_tray.exe" | Out-File -FilePath "release_package/QUICK_START.md" -Append -Encoding UTF8
        echo "2. Access Interface: Right-click tray icon ‚Üí Open Web Interface" | Out-File -FilePath "release_package/QUICK_START.md" -Append -Encoding UTF8
        echo "3. Configure: Go to http://localhost:8080/config" | Out-File -FilePath "release_package/QUICK_START.md" -Append -Encoding UTF8
        echo "4. Connect GPS: Configure your GPS connection (Serial/UDP/TCP)" | Out-File -FilePath "release_package/QUICK_START.md" -Append -Encoding UTF8
        echo "" | Out-File -FilePath "release_package/QUICK_START.md" -Append -Encoding UTF8
        echo "## System Requirements" | Out-File -FilePath "release_package/QUICK_START.md" -Append -Encoding UTF8
        echo "" | Out-File -FilePath "release_package/QUICK_START.md" -Append -Encoding UTF8
        echo "Windows 10/11" | Out-File -FilePath "release_package/QUICK_START.md" -Append -Encoding UTF8
        echo "No additional installations required (all dependencies included)" | Out-File -FilePath "release_package/QUICK_START.md" -Append -Encoding UTF8
        echo "" | Out-File -FilePath "release_package/QUICK_START.md" -Append -Encoding UTF8
        echo "## Support" | Out-File -FilePath "release_package/QUICK_START.md" -Append -Encoding UTF8
        echo "" | Out-File -FilePath "release_package/QUICK_START.md" -Append -Encoding UTF8
        echo "For support and documentation, visit: https://github.com/syldeb35/nmea-tracker-server" | Out-File -FilePath "release_package/QUICK_START.md" -Append -Encoding UTF8

        # Create version info
        $version = if ($env:GITHUB_REF -match 'refs/tags/(.*)') { $matches[1] } else { "${{ github.event.inputs.version }}" }
        echo "Version: $version" | Out-File -FilePath "release_package/VERSION.txt" -Encoding UTF8
        echo "Build Date: $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss UTC')" | Out-File -FilePath "release_package/VERSION.txt" -Append -Encoding UTF8
        echo "Commit: $(git rev-parse --short HEAD)" | Out-File -FilePath "release_package/VERSION.txt" -Append -Encoding UTF8

    - name: üì¶ Create ZIP Archive
      run: |
        $version = if ($env:GITHUB_REF -match 'refs/tags/(.*)') { $matches[1] } else { "${{ github.event.inputs.version }}" }
        $zipName = "NMEA-Tracker-Server-$version-Windows.zip"
        
        # Create ZIP archive
        Compress-Archive -Path "release_package/*" -DestinationPath $zipName -Force
        
        echo "üì¶ Created release package: $zipName"
        echo "Size: $([math]::Round((Get-Item $zipName).Length/1MB, 2)) MB"

    - name: üìä Release Summary
      run: |
        echo "=== Release Build Summary ==="
        echo ""
        echo "Built Applications:"
        Get-ChildItem "dist/*.exe" | ForEach-Object {
          $size = [math]::Round($_.Length/1MB, 2)
          echo "  ‚úÖ $($_.Name) - ${size} MB"
        }
        echo ""
        echo "Package Contents:"
        Get-ChildItem "release_package" -Recurse | ForEach-Object {
          if (-not $_.PSIsContainer) {
            echo "  üìÑ $($_.FullName.Replace((Get-Location).Path + '\release_package\', ''))"
          }
        }
        echo ""
        echo "üöÄ Release package ready for deployment!"

    - name: üì§ Upload Release Package
      uses: actions/upload-artifact@v4
      with:
        name: NMEA-Tracker-Server-Release
        path: "*.zip"
        retention-days: 90

    - name: üì§ Upload Release Assets
      if: github.event_name == 'release'
      uses: softprops/action-gh-release@v1
      with:
        files: |
          *.zip
          release_package/QUICK_START.md
        name: "NMEA Tracker Server ${{ github.event.release.tag_name }}"
        body: |
          ## üéØ NMEA Tracker Server Release
          
          ### üì¶ Downloads
          
          - **ü•á Recommended**: System Tray version - Easy to use with system tray management
          - **üñ•Ô∏è Console**: Standard console version - Direct server execution with console output  
          - **üß™ Test**: Development version - Enhanced debugging and testing features
          - **üîß Manager**: GUI Manager - Visual interface for server management
          - **üìÅ Complete Package**: Full release with all versions and documentation
          
          ### üöÄ Quick Start
          
          1. Download and extract the complete package
          2. Run nmea_server_tray.exe (recommended)
          3. Look for icon in system tray
          4. Right-click icon ‚Üí "Start Server"
          5. Open http://localhost:8080/config for configuration
          
          ### ‚ú® Features
          
          - Enhanced system tray interface
          - Improved AIS fragment handling
          - Better configuration management
          - Multiple deployment options
          - Internationalization support (English)
          
          See QUICK_START.md for detailed instructions.
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: üì§ Upload Artifacts (Manual Trigger)
      if: github.event_name == 'workflow_dispatch'
      uses: actions/upload-artifact@v4
      with:
        name: nmea-tracker-server-all-versions
        path: |
          *.zip
          release_package/
        retention-days: 30
