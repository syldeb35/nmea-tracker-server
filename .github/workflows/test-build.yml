name: 🧪 Test & Build PR

on:
  pull_request:
    branches: [ main, develop ]
  push:
    branches: [ develop ]

env:
  PYTHON_VERSION: '3.11'

jobs:
  test-build:
    name: 🔍 Test System Tray Build
    runs-on: windows-latest
    
    steps:
    - name: 📥 Checkout
      uses: actions/checkout@v4

    - name: 🐍 Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'

    - name: 📦 Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements_enhanced.txt

    - name: 🔐 Generate Test Certificates
      run: |
        python -c "
        from cryptography import x509
        from cryptography.hazmat.primitives import hashes, serialization
        from cryptography.hazmat.primitives.asymmetric import rsa
        from datetime import datetime, timedelta
        
        private_key = rsa.generate_private_key(public_exponent=65537, key_size=2048)
        subject = issuer = x509.Name([x509.NameAttribute(x509.NameOID.COMMON_NAME, 'localhost')])
        cert = x509.CertificateBuilder().subject_name(subject).issuer_name(issuer).public_key(private_key.public_key()).serial_number(x509.random_serial_number()).not_valid_before(datetime.utcnow()).not_valid_after(datetime.utcnow() + timedelta(days=1)).sign(private_key, hashes.SHA256())
        
        with open('cert.pem', 'wb') as f: f.write(cert.public_bytes(serialization.Encoding.PEM))
        with open('key.pem', 'wb') as f: f.write(private_key.private_bytes(encoding=serialization.Encoding.PEM, format=serialization.PrivateFormat.PKCS8, encryption_algorithm=serialization.NoEncryption()))
        print('Test certificates created')
        "

    - name: 🏗️ Test Build System Tray
      run: |
        echo "Testing System Tray build..."
        if (Test-Path "dist") { Remove-Item -Recurse -Force "dist" }
        if (Test-Path "build") { Remove-Item -Recurse -Force "build" }
        
        pyinstaller nmea_server_tray.spec --clean --noconfirm
        
        if (Test-Path "dist/nmea_tracker_tray.exe") {
            echo "✅ System Tray build successful"
            $size = (Get-Item "dist/nmea_tracker_tray.exe").Length
            echo "File size: $([math]::Round($size/1MB, 2)) MB"
        } else {
            echo "❌ System Tray build failed"
            exit 1
        }

    - name: 🧪 Quick Test
      run: |
        echo "Testing executable startup..."
        cd dist
        # Test basic startup (should exit quickly with --version or similar)
        timeout 10 .\nmea_tracker_tray.exe --console || echo "Quick test completed"

    - name: 📊 Report
      run: |
        echo "=== Build Report ==="
        echo "✅ Dependencies installed successfully"
        echo "✅ SSL certificates generated"
        echo "✅ System Tray executable built"
        echo "✅ Basic functionality test passed"
        echo ""
        echo "Ready for production build!"
